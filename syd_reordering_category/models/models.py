# -*- coding: utf-8 -*-
# Â© 2019 SayDigital s.r.l.
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl.html).

import datetime, calendar
from dateutil.relativedelta import relativedelta
from odoo import api, exceptions, fields, models, _,SUPERUSER_ID
from odoo.exceptions import UserError, AccessError, ValidationError
from werkzeug import urls
import calendar
from odoo import tools
from dateutil.relativedelta import relativedelta
from werkzeug.urls import url_join
from odoo.tools.safe_eval import safe_eval
    
class Orderpoint(models.Model):
    _inherit = "stock.warehouse.orderpoint"

    orderpoint_cat_id= fields.Many2one('stock.warehouse.category_orderpoint',string="Category",ondelete="cascade")
    
class OrderpointCategory(models.Model):
    """ Defines Minimum stock rules. """
    _name = "stock.warehouse.category_orderpoint"
    _description = "Category Minimum Inventory Rule"
    
    
    
    @api.model
    def default_get(self, fields):
        res = super(OrderpointCategory, self).default_get(fields)
        warehouse = None
        if 'warehouse_id' not in res and res.get('company_id'):
            warehouse = self.env['stock.warehouse'].search([('company_id', '=', res['company_id'])], limit=1)
        if warehouse:
            res['warehouse_id'] = warehouse.id
            res['location_id'] = warehouse.lot_stock_id.id
        return res

    name = fields.Char(
        'Name', copy=False, required=True, 
        )
    orderpoint_ids = fields.One2many('stock.warehouse.orderpoint','orderpoint_cat_id',string="Orderpoints")
    orderpoint_count = fields.Integer('Count',compute="_count")
    model_name = fields.Char('Model name',default='product.product')
    warehouse_id = fields.Many2one(
        'stock.warehouse', 'Warehouse',
        check_company=True, ondelete="cascade", required=True)
    location_id = fields.Many2one(
        'stock.location', 'Location',
        ondelete="cascade", required=True, check_company=True)
    product_category_id = fields.Many2one(
        'product.category', 'Category',
         ondelete='cascade')
    product_min_qty = fields.Float(
        'Minimum Quantity', digits='Product Unit of Measure', required=True,
        help="When the virtual stock equals to or goes below the Min Quantity specified for this field, Odoo generates "
             "a procurement to bring the forecasted quantity to the Max Quantity.")
    product_max_qty = fields.Float(
        'Maximum Quantity', digits='Product Unit of Measure', required=True,
        help="When the virtual stock goes below the Min Quantity, Odoo generates "
             "a procurement to bring the forecasted quantity to the Quantity specified as Max Quantity.")
    qty_multiple = fields.Float(
        'Qty Multiple', digits='Product Unit of Measure',
        default=1, required=True,
        help="The procurement quantity will be rounded up to this multiple.  If it is 0, the exact quantity will be used.")
    group_id = fields.Many2one(
        'procurement.group', 'Procurement Group', copy=False,
        help="Moves created through this orderpoint will be put in this procurement group. If none is given, the moves generated by stock rules will be grouped into one big picking.")
    company_id = fields.Many2one(
        'res.company', 'Company', required=True, index=True,
        default=lambda self: self.env.company)
    lead_days = fields.Integer(
        'Lead Time', default=1,
        help="Number of days after the orderpoint is triggered to receive the products or to order to the vendor")
    lead_type = fields.Selection(
        [('net', 'Days to get the products'), ('supplier', 'Days to purchase')], 'Lead Type',
        required=True, default='supplier')
    filter_domain = fields.Char('Filter On', help=" Filter on the object")
    
    
    def _count(self):
        self.orderpoint_count=len(self.orderpoint_ids)
        
        
    def generate(self):
        if self.product_category_id:
            domain = [('categ_id','child_of',self.product_category_id.id)] + (safe_eval(self.filter_domain,  {}) if self.filter_domain else [])
        else:
            domain = (safe_eval(self.filter_domain,  {}) if self.filter_domain else [])

        product_ids = self.env['product.product'].search(domain)
        for p in product_ids:
            rr = self.env['stock.warehouse.orderpoint'].search([
                                                            ('product_id','=',p.id),
                                                            ('warehouse_id','=',self.warehouse_id.id),
                                                            ('location_id','=',self.location_id.id),
                                                            ('orderpoint_cat_id','=',self.id)
                                                         ])
            if not rr:
                self.env['stock.warehouse.orderpoint'].create(
                                                              {
                                                               'orderpoint_cat_id':self.id,
                                                               'product_id':p.id,
                                                               'warehouse_id':self.warehouse_id.id,
                                                               'location_id':self.location_id.id,
                                                               'product_min_qty':self.product_min_qty,
                                                               'product_max_qty':self.product_max_qty,
                                                               'qty_multiple':self.qty_multiple,
                                                               'group_id':self.group_id.id,
                                                               'company_id':self.company_id.id,
                                                               'lead_days':self.lead_days,
                                                               'lead_type':self.lead_type
                                                               }
                                                              )

    